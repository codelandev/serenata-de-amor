
# coding: utf-8

# # Find clusters of politicians spending with companies owned by each others relatives or himself (issue #18)

# In this analysis we try to identify the pattern described bellow:
# 
# * According to "ATO DA MESA Nº 43, DE 21/5/2009 Art. 4º § 13", no expense can be reimbursed if made with companies where the applicant (politician) is owner, partner or relative (maximum of third degree).
# 
# Politicians may know about this and have groups to "exchange expenses" to cheat the law. e.g. Politician A pays for Politician B's relatives; Politician B pays for Politician A's relatives.

# In[1]:

from unicodedata import normalize
def normalize_name(name):
    return normalize('NFKD', name).encode('ASCII', 'ignore').decode('utf-8').upper()

def normalize_list(my_list):
    result = []
    for n in my_list:
        result.append(normalize_name(n))
    return result

import requests
import json
import os
import time

cache = {}
cache_path = '../data/cnpj_cache.json'
if os.path.exists(cache_path):
    cache = json.loads(open(cache_path, 'r').read())

def save_cnpj_cache():
    global cache
    open(cache_path, 'w').write(json.dumps(cache))
    
def extract_cnpj_board(cnpj):
    global cache
    result = []
    try:
        if cnpj not in cache:
            url = 'http://receitaws.com.br/v1/cnpj/%s' % cnpj
            try:
                text = requests.get(url, timeout=5).text
                if 'too many' in text.lower():
                    time.sleep(1)
                    return extract_cnpj_board(cnpj)
                data = json.loads(text)

                cache[cnpj] = data
            except:
                cache[cnpj] = {'error': 'timeout'}
        else:
            data = cache[cnpj]

        if 'qsa' in data:
            for info in data['qsa']:
                result.append(normalize_name(info['nome']))
    except:
        #print('Error collecting data from:', cnpj)
        pass
    return result


# Load database of reimbursements to start our analysis

# In[2]:

import pandas as pd
import numpy as np
import json

df = pd.read_csv('../data/2016-12-07-reimbursements.xz',
                 dtype={ 'cnpj_cpf': np.str, 'reimbursement_numbers': np.str })


# First lets simulate the situation described in the news
# * Situation: http://m.congressoemfoco.uol.com.br/noticias/deputado-gasta-r-189-mil-da-cota-para-abastecer-no-posto-do-irmao/
# * Comment about this process: https://github.com/datasciencebr/serenata-de-amor/issues/17#issuecomment-254656648
# 
# 
# So as described in the issue I'll do the same following steps:
# 
# * I did need to find the fullname of deputy "Wellington Roberto" and achieve this in: http://www.camara.leg.br/internet/deputado/dep_Detalhe.asp?id=5830395
# * So I would like to find out all of companies that him is involved as partner:
# http://www.consultasocio.com/q/sa/jose-wellington-roberto
# * There I found these names: Jose Edvan Roberto, Milena Roberto De Assis, Alto Branco Participacoes S/S Ltda, Walkiria Henriques Roberto(That I judge that all partner are part of family of deputy Jose Wellington Roberto).
# So I did research for "Jose Edvan Roberto" and bazinga!!!!
# http://www.consultasocio.com/q/sa/jose-edvan-roberto
# 
# * This guy(brother of wellington roberto) owns "Posto de Combustivel Shopping Ltda" company with all Roberto's family.

# In[3]:

# Step 1: Collect the civil name of Wellington Roberto

# Collect and merge with the main DataFrame the Civil Names 
# (the database used is generated by src/fetch_civil_names.py and of course it'll take a while)
civil_names = pd.read_csv('../data/2016-12-07-congressperson-civil-names.xz')
df = pd.merge(left=df,right=civil_names, left_on='congressperson_id', right_on='congressperson_id', how='right')

# Step 2: Get all business partners
# Let's open the Business Partners database that you can download here: (link)
bp_database = json.loads(open('../data/2016-12-13-congressperson-business-partners.json', 'r').read())


# If any company is owned by the people showed above it's illegal and we have a problem because they are business partners.

# In[78]:

# Step 3: Look for expenses that are made in companies owned by these people

def identify_fraud(congressperson_name):
    if len(df[df['congressperson_name'] == congressperson_name]):
        civil_name = normalize_name(df[df['congressperson_name'] == congressperson_name]['civil_name'].iloc[0])
        if civil_name in bp_database:
            business_partners = bp_database[civil_name]['partners']

            for cnpj in df[df['congressperson_name'] == congressperson_name]['cnpj_cpf'].unique():
                board_names = extract_cnpj_board(cnpj)
                if len(set(normalize_list(business_partners)) & set(normalize_list(board_names))):
                    print('- Possibly fraud detected', cnpj)
        else:
            print('WARN: %s not found in business partners database' % civil_name)


# In[80]:

id = 0
total = len(df['congressperson_name'].unique())
for name in df['congressperson_name'].unique():
    id += 1
    print('%d/%d: %s' % (id, total, name))
    identify_fraud(name)
    save_cnpj_cache()


# In the report above we found some possibly frauds, let's check all of them:
# 
# 55/1089: CIRO NOGUEIRA - CNPJ: 01971900000149
# 
# 175/1089: MARIA HELENA - CNPJ: 15522508000127
# 
# 210/1089: SANDRA ROSADO - CNPJ: 08314429000165
# 
# 219/1089: WELLINGTON ROBERTO - CNPJ: 09307232000161
# 
# 294/1089: FELIPE MAIA - CNPJ: 07083712000160
# 
# 338/1089: LUIZ FERNANDO FARIA - CNPJ: 24574923000115
# 
# 408/1089: VITOR PENIDO - CNPJ: 00152489000117
# 
# 501/1089: JORGE CÔRTE REAL - CNPJ: 08872798000173
# 
# 566/1089: BERINHO BANTIM - CNPJ: 14331631000106
# 
# 592/1089: JOSÉ NUNES - CNPJ: 08008566000171
# 
# 670/1089: FERNANDO JORDÃO - CNPJ: 02409350000131 and 03825735000142
# 
# 758/1089: LUCIANO CASTRO - CNPJ: 01271789000188
# 
# 770/1089: ARMANDO ABÍLIO - CNPJ: 12610937000168
# 
# 773/1089: BETINHO ROSADO - CNPJ: 12997664000156 and 24186785000105
# 
# 898/1089: RAQUEL MUNIZ - CNPJ: 16902140000195
# 
# 934/1089: MARINALDO ROSENDO - CNPJ: 10651703000133
# 
# 971/1089: FÁBIO MITIDIERI - CNPJ: 00826182000154
# 
# 977/1089: RODRIGO PACHECO - CNPJ: 17272550000162
# 
# 1034/1089: LUCIO MOSQUINI - CNPJ: 11601349000103

# In[82]:

def show_fraud_info(congressperson_name, cnpj):
    civil_name = normalize_name(df[df['congressperson_name'] == congressperson_name]['civil_name'].iloc[0])
    board_names = extract_cnpj_board(cnpj)
    
    business_partners = bp_database[civil_name]['partners']
    frauds = df.loc[(df['congressperson_name'] == congressperson_name) & (df['cnpj_cpf'] == cnpj), 
                    ['issue_date', 'cnpj_cpf', 'supplier', 'total_net_value']]
    print('Congress Name: %s' % congressperson_name)
    print('Civil Name: %s' % civil_name)
    print('CNPJ Business Partners Name:', list(set(normalize_list(business_partners)) & set(normalize_list(board_names))))
    print('%d suspect transactions in amount of R$ %.2f' % (len(frauds.total_net_value), frauds.total_net_value.sum()))
    return frauds


# # Nepotism detected

# ## Sandra Maria da Escóssia Rosado

# ATTENTION: In the case bellow we have a fraud!
# 
# Because SANDRA MARIA DA ESCÓSSIA ROSADO is wife of LAIRE ROSADO FILHO
# 
# More information about the family: http://www.blogdobg.com/tag/sandra/

# In[83]:

show_fraud_info('SANDRA ROSADO', '08314429000165')


# ## José Wellington Roberto

# ATTENTION: In the case bellow we have a fraud! 
# 
# Because José Wellington Roberto is brother of josé Edvan Roberto and it's not allowed!

# In[84]:

show_fraud_info('WELLINGTON ROBERTO', '09307232000161')


# ## Luiz Fernando Ramos Faria

# ATTENTION: In the case bellow we have a fraud! 
# 
# Because Luiz Fernando Ramos Faria is brother of Carlos Alberto Ramos de Faria and it's not allowed!

# In[85]:

show_fraud_info('LUIZ FERNANDO FARIA', '24574923000115')


# # Suspect Nepotism Transactions

# These are the cases that I'm not sure yet if they are from the same family or not.

# QUESTION: I think that Vitor Penido de Barros is father of Cristiano Sarti Barros but not sure.
# 
# We can see something about they here:
# http://www.cmnovalima.mg.gov.br/wp-content/uploads/2015/11/Ata-r.-o.-25-03-14.pdf

# In[86]:

show_fraud_info('VITOR PENIDO', '00152489000117')


# QUESTION: Are Jorge Corte Real and Angela Corte Real de Moraes in the same family?

# In[87]:

show_fraud_info('JORGE CÔRTE REAL', '08872798000173')


# QUESTION: Are FERNANDO ANTONIO CECILIANO JORDAO and MARCELO ANTONIO LIMA JORDAO in the same family?

# In[88]:

show_fraud_info('FERNANDO JORDÃO', '02409350000131')


# In[89]:

show_fraud_info('FERNANDO JORDÃO', '03825735000142')


# In[90]:

# 773/1089: BETINHO ROSADO - CNPJ: 12997664000156
show_fraud_info('BETINHO ROSADO', '12997664000156')


# In[91]:

# 773/1089: BETINHO ROSADO - CNPJ: 24186785000105
show_fraud_info('BETINHO ROSADO', '24186785000105')


# In[92]:

# 898/1089: RAQUEL MUNIZ - CNPJ: 16902140000195
show_fraud_info('RAQUEL MUNIZ', '16902140000195')


# In[93]:

# 971/1089: FÁBIO MITIDIERI - CNPJ: 00826182000154
show_fraud_info('FÁBIO MITIDIERI', '00826182000154')


# In[94]:

# 1034/1089: LUCIO MOSQUINI - CNPJ: 11601349000103
show_fraud_info('LUCIO MOSQUINI', '11601349000103')


# # Business Partners Transactions

# These are the curious cases where they spend a lot of money in companies that belongs to their business partners.

# In[95]:

show_fraud_info('MARIA HELENA', '15522508000127')


# In[96]:

show_fraud_info('CIRO NOGUEIRA', '01971900000149')


# In[97]:

show_fraud_info('FELIPE MAIA', '07083712000160')


# In[98]:

show_fraud_info('BERINHO BANTIM', '14331631000106')


# In[99]:

show_fraud_info('JOSÉ NUNES', '08008566000171')


# In[100]:

# 758/1089: LUCIANO CASTRO - CNPJ: 01271789000188
show_fraud_info('LUCIANO CASTRO', '01271789000188')


# In[101]:

# 770/1089: ARMANDO ABÍLIO - CNPJ: 12610937000168
show_fraud_info('ARMANDO ABÍLIO', '12610937000168')


# In[102]:

# 934/1089: MARINALDO ROSENDO - CNPJ: 10651703000133
show_fraud_info('MARINALDO ROSENDO', '10651703000133')


# In[103]:

# 977/1089: RODRIGO PACHECO - CNPJ: 17272550000162
show_fraud_info('RODRIGO PACHECO', '17272550000162')


# # Conclusion

# Besides the database is hard to collect, because I spent a lot of time collecting information from ConsultaSocio and CNPJ database this system is really good to identify suspect transactions.
# 
# The idea here is to identify family that has business together and check how they spend our money there.
# 
# Now we have something about R$ 176.613,03 that we know is money spent in illegal way.
# 
# We suspect that R$ 125.912,51 is spent in family business but needs further investigation.
# 
# We also have R$ 290.630,66 that is spent in business partners companies and maybe we can have some conflict of interests when contracting this companies.
